
use crate::Stack;


// Immediately go to struct of arrays rather than array of structs since it was significantly faster in Cache
// This of course requires perf testing at some point but this is just a poc so I can get other work done. 

// Every AST node can be described by the Rule it matches and the start and end positions of it's content.
// The order in which the nodes are pushed into the stack dictate the parent-child relationships
// Any Node who's start and end position is fully contained inside the previous nodes start and end position is a child. etc

pub struct BasicStack{
    rules: Vec<u32>,
    start_positions: Vec<u32>, 
    end_positions: Vec<u32>,
}

impl Stack for BasicStack{
    fn new(size_of_source: u32, number_of_rules: u32) -> Self {
        // Since the Stack needs to be able to take all the elements generated by the AST and we can't guarantee 
        // ahead of time how many elements that is, we will use a heuristic of the source size*number_of_structs*some_hardcoded_parameter
        let parameter = 1; // TODO: May be worth enabling to make this tunable at some point 
        let capacity = (size_of_source*number_of_rules*parameter) as usize;
        println!("Bytes Available: {:?}", capacity);
        BasicStack{
            rules: Vec::with_capacity(capacity), 
            start_positions: Vec::with_capacity(capacity), 
            end_positions: Vec::with_capacity(capacity),
        }
    }
    fn push(&mut self, is_true: bool, rule: u32, start_position: u32, end_position: u32){
        match is_true {
            true => {
                // When true push onto stack
                self.rules.push(rule);
                self.start_positions.push(start_position);
                self.end_positions.push(end_position);
            },
            false => {
                // When false pop all instructiosn that exist between start_position and end_position. 
                loop{
                    let len = self.rules.len();
                    if len == 0{
                        break
                    }
                    let last_index = len - 1;
                    //let last_elem_rule = self.rules[last_index];
                    let last_start_position = self.start_positions[last_index];
                    let last_end_position = self.end_positions[last_index];

                    if start_position >= last_start_position && end_position <= last_end_position {
                        self.rules.pop();
                        self.end_positions.pop();
                        self.start_positions.pop();
                    }
                    else{
                        break
                    }
                }
            }
        }
    }
    fn remove(&mut self, _index: u32){

    }
}

impl BasicStack{
    pub fn print(&self, source: &String){
        let l1 = self.rules.len();
        let l2 = self.start_positions.len();
        let l3 = self.end_positions.len();
        if l1 == l2 && l2 == l3 && l3 == l1{
            for i in 0..l1{
                let p1 = self.rules[i];
                let p2 = self.start_positions[i];
                let p3 = self.end_positions[i];
                let s1 = p2 as usize;
                let s2 = p3 as usize; 
                let slice = &source[s1..s2];
                if p1 == 20{
                println!("Rule: {:?}, Start Position: {:?}, End Position: {:?} => {}", p1, p2, p3, slice);
                }
            }
        }
        else{
            println!("Something went wrong with BasicStack, Vector lengths must be identical.");
        }
    }
}