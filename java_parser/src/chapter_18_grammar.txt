<abstract> = "a","b","s","t","r","a","c","t";
<continue> = "c","o","n","t","i","n","u","e";
<for> = "f","o","r";
<new> = "n","e","w";
<switch> = "s","w","i","t","c","h";
<assert> = "a","s","s","e","r","t";
<default> = "d","e","f","a","u","l","t";
<if> = "i","f";
<package> = "p","a","c","k","a","g","e";
<synchronized> = "s","y","n","c","h","r","o","n","i","z","e","d";
<boolean> = "b","o","o","l","e","a","n";
<do> = "d","o";
<goto> = "g","o","t","o";
<private> = "p","r","i","v","a","t","e";
<this> = "t","h","i","s";
<break> = "b","r","e","a","k";
<double> = "d","o","u","b","l","e";
<implements> = "i","m","p","l","e","m","e","n","t","s";
<protected> = "p","r","o","t","e","c","t","e","d";
<throw> = "t","h","r","o","w";
<byte> = "b","y","t","e";
<else> = "e","l","s","e";
<import> = "i","m","p","o","r","t";
<public> = "p","u","b","l","i","c";
<throws> = "t","h","r","o","w","s";
<case> = "c","a","s","e";
<enum> = "e","n","u","m";
<instanceof> = "i","n","s","t","a","n","c","e","o","f";
<return> = "r","e","t","u","r","n";
<transient> = "t","r","a","n","s","i","e","n","t";
<catch> = "c","a","t","c","h";
<extends> = "e","x","t","e","n","d","s";
<int> = "i","n","t";
<short> = "s","h","o","r","t";
<try> = "t","r","y";
<char> = "c","h","a","r";
<final> = "f","i","n","a","l";
<interface> = "i","n","t","e","r","f","a","c","e";
<static> = "s","t","a","t","i","c";
<void> = "v","o","i","d";
<class> = "c","l","a","s","s";
<finally> = "f","i","n","a","l","l","y";
<long> = "l","o","n","g";
<strictfp> = "s","t","r","i","c","t","f","p";
<volatile> = "v","o","l","a","t","i","l","e";
<const> = "c","o","n","s","t";
<float> = "f","l","o","a","t";
<native> = "n","a","t","i","v","e";
<super> = "s","u","p","e","r";
<while> = "w","h","i","l","e";




<Identifier> = <IDENTIFIER>; #Presumably as defined in other chapters#
<QualifiedIdentifier> = <Identifier>, (".", <Identifier>)*;
<QualifiedIdentifierList> = <QualifiedIdentifier>, (",", <QualifiedIdentifier>)*;

<CompilationUnit> = (<Annotations>?, <package>, <QualifiedIdentifier>, ";")?, <ImportDeclaration>*, <TypeDeclaration>*;
<ImportDeclaration> = <import>, <static>?, <Identifier>, (".", <Identifier>)*, (".", "*")?, ";";
<TypeDeclaration> = <ClassOrInterfaceDeclaration>/";";
<ClassOrInterfaceDeclaration> = <Modifier>*, (<ClassDeclaration>/<InterfaceDeclaration>);
<ClassDeclaration> = <NormalClassDeclaration>/<EnumDeclaration>;
<InterfaceDeclaration> = <NormalInterfaceDeclaration>/<AnnotationTypeDeclaration>;
<NormalClassDeclaration> = <class>, <Identifier>, <TypeParameters>?, (<extends>, <Type>)?, (<extends>, <TypeList>)?, <InterfaceBody>;
<AnnotationTypeDeclaration> = "@", <interface>, <Identifier>, <AnnotationTypeBody>;
<Type> = (<BasicType>, ("[", "]")*)/(<ReferenceType>, ("[", "]")*);
<BasicType> = <byte>/<short>/<char>/<int>/<long>/<float>/<double>/<boolean>;
<ReferenceType> = <Identifier>, <TypeArguments>?, (".", <Identifier>, <TypeArguments>?)*;
<TypeArguments> = "<", <TypeArgument>, (",", <TypeArgument>)*, ">";
<TypeArgument> = <ReferenceType>/("?", ((<extends>/<super>), <ReferenceType>)?);
<NonWildcardTypeArguments> = "<", <TypeList>, ">";
<TypeList> = <ReferenceType>, (",", <ReferenceType>)*;
<TypeArgumentsOrDiamond> = ("<", ">")/<TypeArguments>;
<NonWildcardTypeArgumentsOrDiamond> = ("<", ">")/<NonWildcardTypeArguments>;
<TypeParameters> = "<", <TypeParameter>, (",", <TypeParameter>)*, ">";
<Bound> = <ReferenceType>, ("&", <ReferenceType>)*;
<Modifier> = <Annotation>/<public>/<protected>/<private>/<static>/<abstract>/<final>/<native>/<synchronized>/<transient>/<volatile>/<strictfp>;
<Annotations> = <Annotation>+;
<Annotation> = "@", <QualifiedIdentifier>,  
