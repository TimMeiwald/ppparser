
# 3.3 Unicode Escapes #
<UnicodeInputCharacter> = <UnicodeEscape>, <RawInputCharacter>; 
<UnicodeEscape> = "\", <UnicodeMarker>, <HexDigit>, <HexDigit>, <HexDigit>, <HexDigit>;
<UnicodeMarker> = u+; # "u/(<UnicodeMarker, u>)" is left recursive in the 2nd option so for now rewrite to use +#
<RawInputCharacter> = ; #Any Unicode Character, we only support ASCII for now! Left blank for handwritten implementation of this function. Since I'm too lazy to do all 255 ascii values in lieue of unicode for now. Feature improvement for parser generator. # 
<HexDigit> = "0"/"1"/"2"/"3"/"4"/"5"/"6"/"7"/"8"/"9"/"a"/"b"/"c"/"d"/"e"/"f"/"A"/"B"/"C"/"D"/"E"/"F";


# 3.4 Line Terminators #
<LineTerminator> = "\n"/"\r"\("\r", "\n");
<InputCharacter> = !("\n"/"\r"), <UnicodeInputCharacter>; 


# 3.5 Input Elements and Tokens #
<Input> = <InputElements>?, Sub?; 
<Sub> = 26; #the ASCII SUB character, also known as "control-Z". Integers not currently supported as a terminal so need to custom write this method#

<InputElements> = <InputElement>+; # InputElements/(InputElements, InputElement) is defined left recursively so once again. Using +#
<InputElement> = <Whitespace>/<Comment>/<Token>;
<Token> = <Identifier>/<Keyword>/<Literal>/<Seperator>/<Operator>;

# 3.6 White Space # 
<Whitespace> = " "/"\t"/"\f"/<LineTerminator> #"\f" won't work with current gen parser gen so will need to be custom written. #

# 3.7 Comments #
<Comment> = <TraditionalComment>/<EndOfLineComment>;
<TraditionalComment> = "/", "*", <CommentTail>;
<EndOfLineComment> = "/", "/", <CharactersInline>?;
<CommentTail> = ("*", <CommentTailStar>)/(<NotStar>, <CommentTail>);
<CommentTailStar> = "/"/("*", <CommentTailStar>)/(<NotStarNotSlash>, <CommentTail>);
<NotStar> = !"*", <InputCharacter>, <LineTerminator>;

<NotStarNotSlash> = !("*"/"/"), <InputCharacter>, <LineTerminator>;
<CharactersInLine> = <InputCharacter>+; #<InputCharacter>/(<CharactersInLine>, <InputCharacter>) is LR so using + # 

# 3.8 Identifiers #
<Identifier> = !(<Keyword>/<BooleanLiteral>/<NullLiteral>), <IdentifierChars>;
<IdentifierChars> = <JavaLetter>, <JavaLetterOrDigit>*; #<JavaLetter>/(IdentifierChars, <JavaLetterOrDigit>) LR so rewriting to right# 
<JavaLetter> = "A"/"B"/"C"/"D"/"E"/"F"/"G"/"H"/"I"/"J"/"K"/"L"/"M"/"N"/"O"/"P"/"Q"/"R"/"S"/"T"/"U"/"V"/"W"/"X"/"Y"/"Z"/"a"/"b"/"c"/"d"/"e"/"f"/"g"/"h"/"i"/"j"/"k"/"l"/"m"/"n"/"o"/"p"/"q"/"r"/"s"/"t"/"u"/"v"/"w"/"x"/"y"/"z"/"_"/"$";
<JavaLetterOrDigit> = <JavaLetter>/"0"/"1"/"2"/"3"/"4"/"5"/"6"/"7"/"8"/"9"; #Technically JavaLetter and Digit can use any unicode characters but for now we're only supporting ASCII#

# 3.9 Keywords - Really need to add some syntactic sugar for char sequences #
<abstract> = "a","b","s","t","r","a","c","t";
<continue> = "c","o","n","t","i","n","u","e";
<for> = "f","o","r";
<new> = "n","e","w";
<switch> = "s","w","i","t","c","h";
<assert> = "a","s","s","e","r","t";
<default> = "d","e","f","a","u","l","t";
<if> = "i","f";
<package> = "p","a","c","k","a","g","e";
<synchronized> = "s","y","n","c","h","r","o","n","i","z","e","d";
<boolean> = "b","o","o","l","e","a","n";
<do> = "d","o";
<goto> = "g","o","t","o";
<private> = "p","r","i","v","a","t","e";
<this> = "t","h","i","s";
<break> = "b","r","e","a","k";
<double> = "d","o","u","b","l","e";
<implements> = "i","m","p","l","e","m","e","n","t","s";
<protected> = "p","r","o","t","e","c","t","e","d";
<throw> = "t","h","r","o","w";
<byte> = "b","y","t","e";
<else> = "e","l","s","e";
<import> = "i","m","p","o","r","t";
<public> = "p","u","b","l","i","c";
<throws> = "t","h","r","o","w","s";
<case> = "c","a","s","e";
<enum> = "e","n","u","m";
<instanceof> = "i","n","s","t","a","n","c","e","o","f";
<return> = "r","e","t","u","r","n";
<transient> = "t","r","a","n","s","i","e","n","t";
<catch> = "c","a","t","c","h";
<extends> = "e","x","t","e","n","d","s";
<int> = "i","n","t";
<short> = "s","h","o","r","t";
<try> = "t","r","y";
<char> = "c","h","a","r";
<final> = "f","i","n","a","l";
<interface> = "i","n","t","e","r","f","a","c","e";
<static> = "s","t","a","t","i","c";
<void> = "v","o","i","d";
<class> = "c","l","a","s","s";
<finally> = "f","i","n","a","l","l","y";
<long> = "l","o","n","g";
<strictfp> = "s","t","r","i","c","t","f","p";
<volatile> = "v","o","l","a","t","i","l","e";
<const> = "c","o","n","s","t";
<float> = "f","l","o","a","t";
<native> = "n","a","t","i","v","e";
<super> = "s","u","p","e","r";
<while> = "w","h","i","l","e";
<Keyword> = <abstract>/<continue>/<for>/<new>/<switch>/<assert>/<default>/<if>/<package>/<synchronized>/<boolean>/<do>/<goto>/<private>/<this>/<break>/<double>/<implements>/<protected>/<throw>/<byte>/<else>/<import>/<public>/<throws>/<case>/<enum>/<instanceof>/<return>/<transient>/<catch>/<extends>/<int>/<short>/<try>/<char>/<final>/<interface>/<static>/<void>/<class>/<finally>/<long>/<strictfp>/<volatile>/<const>/<float>/<native>/<super>/<while>;
# 3.10 Literals # 
<Literal> = <IntegerLiteral>\<FloatingPointLiteral>\<BooleanLiteral>\<CharacterLiteral>\<StringLiteral>\<NullLiteral>;

# 3.10.1 Integer Literals#
<IntegerLiteral> = <DecimalIntegerLiteral>\<HexIntegerLiteral>\<OctalIntegerLiteral>\<BinaryIntegerLiteral>;
<DecimalIntegerLiteral> = <DecimalNumeral>, <IntegerTypeSuffix>?;
<HexIntegerLiteral> = <HexNumeral>, <IntegerTypeSuffix>?;
<OctalIntegerLiteral> = <OctalNumeral>, <IntegerTypeSuffix>?;
<BinaryIntegerLiteral> = <BinaryNumeral>, <IntegerTypeSuffix>?;
<IntegerTypeSuffix> = "l"/"L";

<DecimalNumeral> = "0"/(<NonZeroDigit>, <Digits>?)/(<NonZeroDigit>, <Underscores>, <Digits>);
<Digits> = <Digit>/(<Digit>, <DigitsAndUnderscores>?, <Digit>);
<Digit> = "0"/<NonZeroDigit>;
<NonZeroDigit> = "1"/"2"/"3"/"4"/"5"/"6"/"7"/"8"/"9";
<DigitsAndUnderscores> = <DigitOrUnderscore>+; #LR on path two so rewritten for right <DigitOrUnderscore>/(DigitsAndUnderscores, DigitOrUnderscore)# 
<DigitOrUnderscore> = <Digit>/"_";
<Underscores> = "_"+; #LR on path 2 so rewrite "_"/(<Underscores>, "_")#

<HexNumeral> = "0", ("x"/"X"), "HexDigits"; #HexDigit already defined in 3.3 hence not redefining here#
<HexDigits> = <HexDigit>/(<HexDigit>, <HexDigitsAndUndercores>?, <HexDigit>);
<HexDigitsAndUnderscores> =  HexDigitOrUnderscore+; # LR rewritten <HexDigitOrUnderscore>/(<HexDigitsAndUnderscores>, <HexDigitOrUnderscore>)#
<HexDigitOrUnderscore> = <HexDigit>/"_";

<OctalNumeral> = "0", <Underscores>?, <OctalDigits>; #Not sure why Oracle wrote there's in such a redundant fashion#
<OctalDigits> = <OctalDigit>/(OctalDigit, OctalDigitsAndUnderscores?, OctalDigit);
<OctalDigit> = "0"/"1"/"2"/"3"/"4"/"5"/"6"/"7";
<OctalDigitsAndUnderscores> = <OctalDigitsAndUnderscore>+; # LR rewritten <OctalDigitOrUnderscore>/(<OctalDigitsAndUnderscores>, <OctalDigitOrUnderscore>)#
<OctalDigitOrUnderscore> = <OctalDigit>/"_";

<BinaryNumeral> = "0", "b"/"B", <BinaryDigits>;
<BinaryDigits> = <BinaryDigit>/(<BinaryDigit>, <BinaryDigitsAndUnderscores>?, BinaryDigit);
<BinaryDigit> = "0"/"1";
<BinaryDigitsAndUnderscores> = <BinaryDigitOrUnderscore>+; #LR Rewritten <BinaryDigitOrUnderscore>/(<BinaryDigitsAndUnderscore>, <BinaryDigitOrUnderscore>)#
<BinaryDigitOrUnderscore> = <BinaryDigit>/"_";

# 3.10.2 Floating Point Literals #
<FloatingPointLiteral> = <DecimalFloatingPointLiteral>/<HexadecimalFloatingPointLiteral>;
<DecimalFloatingPointLiteral> = (<Digits>, ".", <Digits>?, <ExponentPart>?, <FloatTypeSuffix>?)
                                /(".", <Digits>, <ExponentPart>?, <FloatTypeSuffix>?)
                                /(<Digits>, <ExponentPart>, <FloatTypeSuffix>?)
                                /(<Digits>, <ExponentPart>?, <FloatTypeSuffix>);

<ExponentPart> = <ExponentIndicator>, <SignedInteger>;
<ExponentIndicator> = "e"/"E";
<SignedInteger> = <Sign>?, <Digits>;
<Sign> = "+"/"-";
<FloatTypeSuffix> = "f"/"F"/"d"/"D";
<HexadecimalFloatingPointLiteral> = <HexSignificand>, <BinaryExponent>, <FloatTypeSuffix>?;

<HexSignificand> = <HexNumeral>/(<HexNumeral>, ".")/("0", ("x"/"X"), <HexDigits>?, ".", <HexDigits>);
<BinaryExponent> = <BinaryExponentIndicator>, <SignedInteger>;
<BinaryExponentIndicator> = "p"/"P";

# 3.10.3 Boolean Literal #
<BooleanLiteral> = ("t", "r", "u", "e")/("f", "a", "l", "s", "e");
# 3.10.4 Boolean Literal #
<CharacterLiteral> = ("'", <SingleCharacter>, "'")/("'", <EscapeSequence>, "'");
<SingleCharacter> = !"'", !"\", <InputCharacter>;

# 3.10.5 String Literals #
<StringLiteral> = """, <StringCharacters>?, """;
<StringCharacters> = <StringCharacter>+;#LR convert to +#
<StringCharacter> = (!""", !"\", <InputCharacter>)/<EscapeSequence>;

# 3.10.6 #
<EscapeSequence> = "\b"/"\t"/"\n"/"\f"/"\r"/"\"/"'"/"\\"/<OctalEscape>; #Gonna cause an error since I don't handle all of these escape chars in grammar generator yet#
<OctalEscape> = ("\", <OctalDigit>)
                /("\", <OctalDigit>, <OctalDigit>)
                /("\", <ZeroToThree>, <OctalDigit>, <OctalDigit>);
<ZeroToThree> = "0"/"1"/"2"/"3";
# 3.10.7 The Null Literal #
<NullLiteral> = "n", "u", "l", "l";
# 3.11 Seperators #
<Seperators> = "("/")"/"{"/"}"/"["/"]"/";"/","/".";

# 3.12 Operators #
<Operator> = ("=")/(">")/("<")/("!")/("~")/("?")/(":")/("=", "=")/("<", "=")/(">", "=")/("!", "=")/("&", "&")/("|", "|")/("+", "+")/("-", "-")/("+")/("-")/("*")/("/")/("&")/("|")/("^")/("%")/("<", "<")/(">", ">")/(">", ">", ">")/("+", "=")/("-", "=")/("*", "=")/("/", "=")/("&", "=")/("|", "=")/("^", "=")/("%", "=")/("<", "<", "=")/(">", ">", "=")/(">", ">", ">", "=");

 # 4.1 The Kinds of Types and Values #
 <Type> = <PrimitiveType>/<ReferenceType>;
 <PrimitiveType> = <NumericType>/<boolean>;
 <NumericType> = <IntegralType>/<FloatingPointType>;
 <IntegralType> = <byte>/<short>/<int>/<long>/<char>;
 <FloatingPointType> = <float>/<double>;

# 4.3 Reference Types and Values #
<ReferenceType> = <ClassOrInterfaceType>/<TypeVariable>/<ArrayType>;
<ClassOrInterfaceType> = <ClassType>/<InterfaceType>;
<ClassType> = <TypeDeclSpecifier>, <TypeArguments>?;
<InterfaceType> = <TypeDeclSpecifier>, <TypeArguments>?;
<TypeDeclSpecifier> = <TypeName>/(<ClassOrInterfaceType>, ".", <Identifier>);
<TypeName> = <Identifier>, (".", <Indentifier>)*; # <Identifier>/(<TypeName>, ".", <Identifier>) LR for 2nd path rewritten#
<TypeVariable> = <Identifier>;
<ArrayType> = <Type>, "[", "]";

# 4.4 Type Variables #
<TypeParameter> = <TypeVariable>, <TypeBound>?;
<TypeBound> = (<extends>, <TypeVariable>)/(<extends>, <ClassOrInterfaceType>, <AdditionalBoundList>?);
<AdditionalBoundList> = <AdditionalBound>+; #LR rewritten# 
<AdditionalBound> = "&", <InterfaceType>;

# 4.5.1 Type Arguments and Wildcards #
<TypeArguments> = "<", <TypeArgumentList>, ">";
<TypeArgumentList> = <TypeArgument>+; #LR rewritten#
<TypeArgument> = <ReferenceType>, <Wildcard>;
<Wildcard> = "?", <WildcardBounds>?;
<WildcardBounds> = (<extends>, <ReferenceType>)/(<super>, <ReferenceType>);

# 6.5 Determining the meaning of a name #
<PackageName> = <Identifier>, (".", <Identifier>)*; #LR rewritten#
<TypeName> = <Identifier>/(<PackageOrTypeName>, ".", <Identifier>);
<ExpressionName> = <Identifier>/(<AmbigousName>, ".", <Identifier>);
<MethodName> = <Identifier>/(<AmbigousName>, ".", <Identifier>);
<PackageOrTypeName> = <Identifier>, (".", <Identifier>)*; #LR rewritten# 
<AmbigousName> = <Identifier>, (".", <Identifier>)*; #LR Rewritten#

# 7.3 Compilation Units #
<CompilationUnit> = <PackageDeclaration>?, <ImportDeclarations>?, <TypeDeclarations>?;
<ImportDeclaration> = <ImportDeclaration>+; #LR rewriitten#
<TypeDeclarations> = <TypeDeclaration>+; #:R Rewritten#

# 7.4.1 Named Packages #
<PackageDeclaration> = <Annotations>?, <package>, <PackageName>, ";";


# 7.5 Import Declarations #
<ImportDeclaration> = <SingleTypeImportDeclaration>/<TypeImportOnDemandDeclaration>/<SingleStaticImportDeclaration>/<StaticImportOnDemandDeclaration>;

# 7.5.1 Single-Type-Import Declarations #
<SingleTypeImportDeclaration> = <import>, <TypeName>, ";";

# 7.5.2. Type-Import-on-Demand Declarations  #
<TypeImportOnDemandDeclaration> = <import>, <PackageOrTypeName>, ".", "*";
# 7.5.3. Single-Static-Import Declarations #
<SingleStaticImportDeclaration> = <import>, <static>, <TypeName>, ".", <Identifier>, ";";
# 7.5.4. Static-Import-on-Demand Declarations #
<StaticImportOnDemandDeclaration> = <import>, <static>, <TypeName>, ".", "*",";";
# 7.6. Top Level Type Declarations #
<TypeDeclaration> = <ClassDeclaration>/<InterfaceDeclaration>/";";


# 8.1 Class Declarations #
<ClassDeclaration> = <NormalClassDeclaration>/<EnumDeclaration>;
<NormalClassDeclaration> = <ClassModifier>?, <class>, <Identifier>, <TypeParameters>? ,<Super>?, <Interfaces>?, <ClassBody>;


# 8.1.1. Class Modifiers #
<ClassModifiers> = <ClassModifier>+; #LR Rewritten#
<ClassModifier> = <Annotation>/<public>/<protected>/<private>/<abstract>/<static>/<final>/<strictfp>;


# 8.1.2. Generic Classes and Type Parameters #
<TypeParameters> = "<", <TypeParameterList>, ">";
<TypeParameterList> = <TypeParameter>+; #LR rewritten#


# 8.1.4 Superclasses and Subclasses #
<Super> = <extends>, <ClassType>;
<ClassType> = <TypeDeclSpecifier>, <TypeArguments>?;


# 8.1.5. Superinterfaces #
<Interfaces> = <implements>, <InterfaceTypeList>;
<InterfaceTypeList> = <InterfaceType>+ #LR rewritten#

# 8.1.6. Class Body and Member Declarations #
<ClassBody> = (<ClassBodyDeclarations>?)*;
<ClassBodyDeclarations> = <ClassBodyDeclaration>+; #LR rewritten#
<ClassBodyDeclaration> = <ClassMemberDeclaration>/<InstanceInitializer>/<StaticInitializer>/<ConstructorDeclaration>;
<ClassMemberDeclaration> = <FieldDeclaration>/<MethodDeclaration>/<ClassDeclaration>/<InterfaceDeclaration>/";";

# 8.3 Field Declarations #
<FieldDeclaration> = <FieldModifiers>?, <Type>, <VariableDeclarators>, ";";
<VariableDeclarators> = <VariableDeclarator>+;
<VariableDeclarator> = <VariableDeclaratorId>, ("=", <VariableInitializer>)?;
<VariableDeclaratorId> = <Identifier>/(VariableDeclaratorId, "[", "]");
<VariableInitializer> = <Expression>/<ArrayInitializer>;
# 8.3.1 Field Modifiers #
<FieldModifiers> = <FieldModifier>+;
<FieldModifier> = <Annotation>/<public>/<protected>/<private>/<static>/<final>/<transient>/<volatile>;

# 8.4. Method Declarations # 
<MethodDeclaration> = <MethodHeader>, <MethodBody>;
<MethodHeader> = <MethodModifiers>?, <TypeParameters>?, <Result>, <MethodDeclarator>, <Throws>?;
<MethodDeclarator> = <Identifier>, "(", <FormalParameterList>?, ")";

# 8.4.1 #
<FormalParameterList> = <LastFormalParameter>/(<FormalParameters>, "," ,<LastFormalParameter>);
<FormalParameters> = <FormalParameter>, (",", <FormalParameter>)*; #LR#
<FormalParameter> = <VariableModifiers>?, <Type>, <VariableDeclaratorId>;
<VariableModifiers> = <VariableModifier>+; #LR#
<VariableModifier>= <Annotation>/<final>;
<LastFormalParameter> = (<VariableModifiers>?, <Type>, ".", ".", ".", <VariableDeclaratorId>)/<FormalParameter>;


# 8.4.3 Method Modifiers #
<MethodModifiers> = <MethodModifier>+;
<MethodModifier> = <Annotation>/<public>/<protected>/<private>/<abstract>/<static>/<final>/<synchronized>/<native>/<strictfp>;


# 8.4.5 Method Return Type#
<Result> = <Type>/<void>;

# 8.4.6 Method Throws #
<Throws> = <throws>, <ExceptionTypeList>;
<ExceptionTypeList> = <ExceptionType>, (",", <ExceptionType>)*; #LR#
<ExceptionType> = <TypeName>/<TypeVariable>;
# 8.4.7. Method Body #
<MethodBody> = <Block>/";";
# 8.6. Instance Initializers #
<InstanceInitializer> = <Block>;
# 8.7. Static Initializers #
<StaticInitializer> = <static>, <Block>;

# 8.8 Constructor Declarations #
<ConstructorDeclaration> = <ConstructorModifiers>?, <ConstructorDeclarator>, <Throws>?, <ConstructorBody>;
<ConstructorDeclarator> = <TypeParameters>?, <SimpleTypeName>, "(", <FormalParameterList>, ")";
# 8.8.3 Constructor Modifiers #
<ConstructorModifiers> = <ConstructorModifier>+;
<ConstructorModifier> = <Annotation>/<public>/<protected>/<private>;
# 8.8.7 Constructor Body #
<ConstructorBody> = "{", <ExplicitConstructorInvocation>?, <BlockStatements>?, "}";

# 8.8.7.1 Explicit Constructor Invocations #
<ExplicitConstructorInvocation> = (<NonWildTypeArguments>?, (<this>/<super>), "(", <ArgumentList>?, ")", ";")
                                /(<Primary>, ".", <NonWildTypeArguments>?, <super>, "(", <ArgumentList>?, ")", ";");


<NonWildTypeArguments> = "<", <ReferenceTypeList> , ">";
<ReferenceTypeList> = <ReferenceType>, (",", <ReferenceType>)*;

# 8.9 Enums #
<EnumDeclaration> = <ClassModifers>?, <enum>, <Identifier>, <Interfaces>?, <EnumBody>;
<EnumBody> = "{", <EnumConstants>?, ","?, <EnumBodyDeclarations>?, "}";
<EnumConstants> = <EnumConstant>, (",", <EnumConstant>)*;
<EnumConstant> = <Annotations>?, <Identifier>, <Arguments>?, <ClassBody>?;
<Arguments> = "(", <ArgumentList>?, ")";
<EnumBodyDeclarations> = ";", <ClassBodyDeclarations>?;

