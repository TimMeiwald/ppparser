
token:
 keyword
 identifier
 constant
 string-literal
 punctuator

preprocessing-token:
 header-name
 identifier
 pp-number
 character-constant
 string-literal
 punctuator
 each non-whitespace character that can't be one of the above
Keywords

keyword: one of
 auto break case char const continue
 default do double else enum extern
 float for goto if inline int long
 register restrict return short signed
 sizeof static struct switch typedef union
 unsigned void volatile while _Alignas
 _Alignof _Atomic _Bool _Complex _Generic
 _Imaginary _Noreturn _Static_assert
 _Thread_local

For a list of additional Microsoft-specific keywords, see C keywords.
Identifiers

identifier:
 identifier-nondigit
 identifier identifier-nondigit
 identifier digit

identifier-nondigit:
 nondigit
 universal-character-name
 other implementation-defined characters

nondigit: one of
 _ a b c d e f g h i j k l m
 n o p q r s t u v w x y z
 A B C D E F G H I J K L M
 N O P Q R S T U V W X Y Z

digit: one of
 0 1 2 3 4 5 6 7 8 9

universal-character-name:
 \u hex-quad
 \U hex-quad hex-quad

hex-quad:
 hexadecimal-digit hexadecimal-digit hexadecimal-digit hexadecimal-digit
Constants

constant:
 integer-constant
 floating-constant
 enumeration-constant
 character-constant

integer-constant:
 decimal-constant integer-suffixopt
 binary-constant1 integer-suffixopt
 octal-constant integer-suffixopt
 hexadecimal-constant integer-suffixopt

decimal-constant:
 nonzero-digit
 decimal-constant digit

binary-constant:1
 binary-prefix binary-digit
 binary-constant binary-digit

binary-prefix1: one of
 0b 0B

binary-digit1: one of
 0 1

octal-constant:
 0
 octal-constant octal-digit

hexadecimal-constant:
 hexadecimal-prefix hexadecimal-digit
 hexadecimal-constant hexadecimal-digit

hexadecimal-prefix: one of
 0x 0X

nonzero-digit: one of
 1 2 3 4 5 6 7 8 9

octal-digit: one of
 0 1 2 3 4 5 6 7

hexadecimal-digit: one of
 0 1 2 3 4 5 6 7 8 9
 a b c d e f
 A B C D E F

integer-suffix:
 unsigned-suffix long-suffixopt
 unsigned-suffix long-long-suffixopt
 long-suffix unsigned-suffixopt
 long-long-suffix unsigned-suffixopt

unsigned-suffix: one of
 u U

long-suffix: one of
 l L

long-long-suffix: one of
 ll LL

floating-constant:
 decimal-floating-constant
 hexadecimal-floating-constant

decimal-floating-constant:
 fractional-constant exponent-partopt floating-suffixopt
 digit-sequence exponent-part floating-suffixopt

hexadecimal-floating-constant:
 hexadecimal-prefix hexadecimal-fractional-constant binary-exponent-partopt floating-suffixopt
 hexadecimal-prefix hexadecimal-digit-sequence binary-exponent-part floating-suffixopt

fractional-constant:
 digit-sequenceopt . digit-sequence
 digit-sequence .

exponent-part:
 e signopt digit-sequence
 E signopt digit-sequence

sign: one of
 + -

digit-sequence:
 digit
 digit-sequence digit

hexadecimal-fractional-constant:
 hexadecimal-digit-sequenceopt . hexadecimal-digit-sequence
 hexadecimal-digit-sequence .

binary-exponent-part:
 p signopt digit-sequence
 P signopt digit-sequence

hexadecimal-digit-sequence:
 hexadecimal-digit
 hexadecimal-digit-sequence hexadecimal-digit

floating-suffix: one of
 f l F L

enumeration-constant:
 identifier

character-constant:
 ' c-char-sequence '
 L' c-char-sequence '

c-char-sequence:
 c-char
 c-char-sequence c-char

c-char:
 Any member of the source character set except the single quotation mark ('), backslash (\), or new-line character
 escape-sequence

escape-sequence:
 simple-escape-sequence
 octal-escape-sequence
 hexadecimal-escape-sequence
 universal-character-name

simple-escape-sequence: one of
 \a \b \f \n \r \t \v
 \' \" \\ \?

octal-escape-sequence:
 \ octal-digit
 \ octal-digit octal-digit
 \ octal-digit octal-digit octal-digit

hexadecimal-escape-sequence:
 \x hexadecimal-digit
 hexadecimal-escape-sequence hexadecimal-digit
String literals

string-literal:
 encoding-prefix " s-char-sequenceopt "

encoding-prefix:
 u8
 u
 U
 L

s-char-sequence:
 s-char
 s-char-sequence s-char

s-char:
 any member of the source character set except the double-quotation mark ("), backslash (\), or new-line character
 escape-sequence
Punctuators

punctuator: one of
 [ ] ( ) { } . ->
 ++ -- & * + - ~ !
 / % << >> < > <= >= ==
 != ^ | && || ? : ; ...
 = *= /= %= += -= <<= >>=
 &= ^= |= , # ##
 <: :> <% %> %: %:%:
Header names

header-name:
 < h-char-sequence >
 " q-char-sequence "

h-char-sequence:
 h-char
 h-char-sequence h-char

h-char:
 any member of the source character set except the new-line character and >

q-char-sequence:
 q-char
 q-char-sequence q-char

q-char:
 any member of the source character set except the new-line character and "
Preprocessing numbers

pp-number:
 digit
 . digit
 pp-number digit
 pp-number identifier-nondigit
 pp-number e sign
 pp-number E sign
 pp-number p sign
 pp-number P sign
 pp-number .

1 binary-constant, binary-prefix, and 

primary-expression:
 identifier
 constant
 string-literal
 ( expression )
 generic-selection

generic-selection:
 _Generic ( assignment-expression , generic-assoc-list )

generic-assoc-list:
 generic-association
 generic-assoc-list , generic-association

generic-association:
 type-name : assignment-expression
 default : assignment-expression

postfix-expression:
 primary-expression
 postfix-expression [ expression ]
 postfix-expression ( argument-expression-listopt )
 postfix-expression . identifier
 postfix-expression -> identifier
 postfix-expression ++
 postfix-expression --
 ( type-name ) { initializer-list }
 ( type-name ) { initializer-list , }

argument-expression-list:
 assignment-expression
 argument-expression-list , assignment-expression

unary-expression:
 postfix-expression
 ++ unary-expression
 -- unary-expression
 unary-operator cast-expression
 sizeof unary-expression
 sizeof ( type-name )  _Alignof ( type-name )

unary-operator: one of
 & * + - ~ !

cast-expression:
 unary-expression
 ( type-name ) cast-expression

multiplicative-expression:
 cast-expression
 multiplicative-expression * cast-expression
 multiplicative-expression / cast-expression
 multiplicative-expression % cast-expression

additive-expression:
 multiplicative-expression
 additive-expression + multiplicative-expression
 additive-expression - multiplicative-expression

shift-expression:
 additive-expression
 shift-expression << additive-expression
 shift-expression >> additive-expression

relational-expression:
 shift-expression
 relational-expression < shift-expression
 relational-expression > shift-expression
 relational-expression <= shift-expression
 relational-expression >= shift-expression

equality-expression:
 relational-expression
 equality-expression == relational-expression
 equality-expression != relational-expression

AND-expression:
 equality-expression
 AND-expression & equality-expression

exclusive-OR-expression:
 AND-expression
 exclusive-OR-expression ^ AND-expression

inclusive-OR-expression:
 exclusive-OR-expression
 inclusive-OR-expression | exclusive-OR-expression

logical-AND-expression:
 inclusive-OR-expression
 logical-AND-expression && inclusive-OR-expression

logical-OR-expression:
 logical-AND-expression
 logical-OR-expression || logical-AND-expression

conditional-expression:
 logical-OR-expression
 logical-OR-expression ? expression : conditional-expression

assignment-expression:
 conditional-expression
 unary-expression assignment-operator assignment-expression

assignment-operator: one of
 = *= /= %= += -= <<= >>= &= ^= |=

expression:
 assignment-expression
 expression , assignment-expression

constant-expression:
 conditional-expression

declaration:
 declaration-specifiers attribute-seqopt1 init-declarator-listopt ;
 static_assert-declaration

declaration-specifiers:
 storage-class-specifier declaration-specifiersopt
 type-specifier declaration-specifiersopt
 type-qualifier declaration-specifiersopt
 function-specifier declaration-specifiersopt
 alignment-specifier declaration-specifiersopt

attribute-seq1:
 attribute1 attribute-seqopt1

attribute1, 2: one of
 __asm __based __cdecl __clrcall __fastcall __inline __stdcall __thiscall __vectorcall

init-declarator-list:
 init-declarator
 init-declarator-list , init-declarator

init-declarator:
 declarator
 declarator = initializer

storage-class-specifier:
 auto
 extern
 register
 static
 _Thread_local
 typedef
 __declspec ( extended-decl-modifier-seq )1

extended-decl-modifier-seq1:
 extended-decl-modifieropt
 extended-decl-modifier-seq extended-decl-modifier

extended-decl-modifier1:
 thread
 naked
 dllimport
 dllexport

type-specifier:
 void
 char
 short
 int
 __int81
 __int161
 __int321
 __int641
 long
 float
 double
 signed
 unsigned
 _Bool
 _Complex
 atomic-type-specifier
 struct-or-union-specifier
 enum-specifier
 typedef-name

struct-or-union-specifier:
 struct-or-union identifieropt { struct-declaration-list }
 struct-or-union identifier

struct-or-union:
 struct
 union

struct-declaration-list:
 struct-declaration
 struct-declaration-list struct-declaration

struct-declaration:
 specifier-qualifier-list struct-declarator-listopt ;
 static_assert-declaration

specifier-qualifier-list:
 type-specifier specifier-qualifier-listopt
 type-qualifier specifier-qualifier-listopt
 alignment-specifier specifier-qualifier-listopt

struct-declarator-list:
 struct-declarator
 struct-declarator-list , struct-declarator

struct-declarator:
 declarator
 declaratoropt : constant-expression

enum-specifier:
 enum identifieropt { enumerator-list }
 enum identifieropt { enumerator-list , }
 enum identifier

enumerator-list:
 enumerator
 enumerator-list , enumerator

enumerator:
 enumeration-constant
 enumeration-constant = constant-expression

atomic-type-specifier:
 _Atomic ( type-name )

type-qualifier:
 const
 restrict
 volatile
 _Atomic

function-specifier:
 inline
 _Noreturn

alignment-specifier:
 _Alignas ( type-name )
 _Alignas ( constant-expression )

declarator:
 pointeropt direct-declarator

direct-declarator:
 identifier
 ( declarator )
 direct-declarator [ type-qualifier-listopt assignment-expressionopt ]
 direct-declarator [ static type-qualifier-listopt assignment-expression ]
 direct-declarator [ type-qualifier-list static assignment-expression ]
 direct-declarator [ type-qualifier-listopt * ]
 direct-declarator ( parameter-type-list )
 direct-declarator ( identifier-listopt )3

pointer:
 * type-qualifier-listopt
 * type-qualifier-listopt pointer

type-qualifier-list:
 type-qualifier
 type-qualifier-list type-qualifier

parameter-type-list:
 parameter-list
 parameter-list , ...

parameter-list:
 parameter-declaration
 parameter-list , parameter-declaration

parameter-declaration:
 declaration-specifiers declarator
 declaration-specifiers abstract-declaratoropt

identifier-list: /* For old-style declarator */
 identifier
 identifier-list , identifier

type-name:
 specifier-qualifier-list abstract-declaratoropt

abstract-declarator:
 pointer
 pointeropt direct-abstract-declarator

direct-abstract-declarator:
 ( abstract-declarator )
 direct-abstract-declarator [ type-qualifier-listopt assignment-expressionopt ]
 direct-abstract-declarator [ static type-qualifier-listopt assignment-expression ]
 direct-abstract-declarator [ type-qualifier-list static assignment-expression ]
 direct-abstract-declarator [ type-qualifier-listopt * ]
 direct-abstract-declaratoropt ( parameter-type-listopt )

typedef-name:
 identifier

initializer:
 assignment-expression
 { initializer-list }
 { initializer-list , }

initializer-list:
 designationopt initializer
 initializer-list , designationopt initializer

designation:
 designator-list =

designator-list:
 designator
 designator-list designator

designator:
 [ constant-expression ]
 . identifier

static_assert-declaration:
 _Static_assert ( constant-expression , string-literal ) ;

statement:
 labeled-statement
 compound-statement
 expression-statement
 selection-statement
 iteration-statement
 jump-statement
 try-except-statement /* Microsoft-specific */
 try-finally-statement /* Microsoft-specific */

jump-statement:
 goto identifier ;
 continue ;
 break ;
 return expressionopt ;
 __leave ; /* Microsoft-specific1 */

compound-statement:
 { declaration-listopt statement-listopt }

declaration-list:
 declaration
 declaration-list declaration

statement-list:
 statement
 statement-list statement

expression-statement:
 expressionopt ;

iteration-statement:
 while ( expression ) statement
 do statement while ( expression ) ;
 for ( expressionopt ; expressionopt ; expressionopt ) statement

selection-statement:
 if ( expression ) statement
 if ( expression ) statement else statement
 switch ( expression ) statement

labeled-statement:
 identifier : statement
 case constant-expression : statement
 default : statement

try-except-statement: /* Microsoft-specific */
 __try compound-statement __except ( expression ) compound-statement

try-finally-statement: /* Microsoft-specific */
 __try compound-statement __finally compound-statement

1 The __leave keyword is only valid within the __try block of a try-except-statement or a try-finally-statement.

translation-unit:
 external-declaration
 translation-unit external-declaration

external-declaration: /* Allowed only at external (file) scope */
 function-definition
 declaration

function-definition: /* This declarator is the function declarator */
 declaration-specifiersopt declarator declaration-listopt compound-statement